using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Entities;
using Markov;
using SquidBot_Sharp.Modules;
using System;
using System.Threading.Tasks;

namespace SquidBot_Sharp.Commands
{
    public class ImpersonateCMD : BaseCommandModule
    {
        [Command("impersonate"), Description("Impersonate a user based on a Markov Chain")]
        public async Task ImpersonateMarkov(CommandContext ctx, DiscordMember member)
        {
            var impersonation = new ImpersonateModule { };

            var usertext = await impersonation.LoadFile(member.Id.ToString());
            if(usertext.Length < 1)
            {
                await ctx.RespondAsync("No data detected for that user!");
                return;
            }

            if(usertext.Length < 100)
            {
                await ctx.RespondAsync($"{member.Username} is currently at {usertext.Length}% of minimum data needed to impersonate.");
                return;
            }

            // Start the markov chains
            var chain = new MarkovChain<string>(1);

            foreach(var entry in usertext)
            {
                var splitentry = entry.Split(" ");
                int currWeight = 1;
                for(double i = 0; i < splitentry.Length; i += 1)
                {
                    currWeight++;
                }
                if (currWeight > 10) currWeight = 10;
                chain.Add(splitentry, currWeight);
            }
            var rand = new Random();

            string sentences = "";
            for (int i = 0; i < 5; i++)
            {
                sentences += "```\n" + string.Join(" ", chain.Chain(rand)).Replace('`', ' ').Replace('\n', ' ') + "```";
            }
            await ctx.RespondAsync($"`These messages were generated by Markov Chains`\nHere are some examples of what {member.Username} sounds like:\n{sentences}");
            return;
        }
    }
}
